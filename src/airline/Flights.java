package airline;

import java.sql.*;
import java.util.Vector;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 * Shows list of flights, with filtering from airports, and allows booking of flights
 * @author kondk
 */

public class Flights extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Flights.class.getName());
    /**
     * Creates new form Flights
     */
    public Flights() {
        initComponents();
        loadAirports();
        searchFlights();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arrComboBox = new javax.swing.JComboBox<>();
        depComboBox = new javax.swing.JComboBox<>();
        arrLabel = new javax.swing.JLabel();
        depLabel = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        bookFlightButton = new javax.swing.JButton();
        ftScrollPane = new javax.swing.JScrollPane();
        flightsTable = new javax.swing.JTable();
        returnButton = new javax.swing.JButton();
        bookTitleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        arrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));
        arrComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrComboBoxActionPerformed(evt);
            }
        });

        depComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));
        depComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depComboBoxActionPerformed(evt);
            }
        });

        arrLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        arrLabel.setLabelFor(arrComboBox);
        arrLabel.setText("Arrival");
        arrLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        arrLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        depLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        depLabel.setLabelFor(depComboBox);
        depLabel.setText("Departure");

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        bookFlightButton.setText("Book Flight Reservation");
        bookFlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookFlightButtonActionPerformed(evt);
            }
        });

        flightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ftScrollPane.setViewportView(flightsTable);

        returnButton.setText("Return back");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        bookTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bookTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bookTitleLabel.setText("BOOK A FLIGHT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ftScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(returnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bookFlightButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(depComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 86, Short.MAX_VALUE)
                            .addComponent(depLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(arrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(arrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(filterButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(bookTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(bookTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depLabel)
                    .addComponent(arrLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ftScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookFlightButton)
                    .addComponent(returnButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void arrComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrComboBoxActionPerformed
        // NOTHING
    }//GEN-LAST:event_arrComboBoxActionPerformed

    private void depComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depComboBoxActionPerformed
        // NOTHING
    }//GEN-LAST:event_depComboBoxActionPerformed

    /**
     * Filters flight based on selected choice on departure and arrival airport combo box
     * @param evt 
     */
    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        searchFlights();
    }//GEN-LAST:event_filterButtonActionPerformed

    /**
     * Gets values from selected flight and opens the booking page (Book.java)
     * @param evt 
     */
    private void bookFlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookFlightButtonActionPerformed
        int selectedRow = flightsTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a flight to book.");
            return;
        }

        // Extracts data from JTable
        String flightNumber = flightsTable.getValueAt(selectedRow, 0).toString();
        String departureAirport = flightsTable.getValueAt(selectedRow, 2).toString();
        String arrivalAirport = flightsTable.getValueAt(selectedRow, 3).toString();
        String depTime = flightsTable.getValueAt(selectedRow, 4).toString();
        String arrTime = flightsTable.getValueAt(selectedRow, 5).toString();
        String airlineName = flightsTable.getValueAt(selectedRow, 1).toString();
        String fare = flightsTable.getValueAt(selectedRow, 6).toString();
        
        // Pass details to Booking.java and open it
        Booking bookingPage = new Booking(
                flightNumber,
                departureAirport,
                arrivalAirport,
                depTime,
                arrTime,
                airlineName,
                fare
        );
        bookingPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bookFlightButtonActionPerformed

    /**
     * Opens Main Dashboard and closes this window
     * @param evt 
     */
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        MainDashboard dashboard = new MainDashboard();
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_returnButtonActionPerformed
        
    /**
     * Loads airports into the combo boxes
     */
    private void loadAirports() {
        // DATABASE CONNECTION
        try (Connection conn = Utility.DatabaseConnection.getConnection();
             Statement st = conn.createStatement()) {

            // Departure Airports
            ResultSet rs1 = st.executeQuery("SELECT DISTINCT DepartureAirport FROM flights");
            while (rs1.next()) {
                depComboBox.addItem(rs1.getString("DepartureAirport"));
            }

            // Arrival Airports
            ResultSet rs2 = st.executeQuery("SELECT DISTINCT ArrivalAirport FROM flights");
            while (rs2.next()) {
                arrComboBox.addItem(rs2.getString("ArrivalAirport"));
            }

        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error loading airports: " + e.getMessage());
        }
    }
    
    /**
     * Populates the table with available flights
     */
    private void searchFlights() {
        String dep = (String) depComboBox.getSelectedItem();
        String arr = (String) arrComboBox.getSelectedItem();
        
        // Join airlines and flights table and fetch flight data
        String sql = "SELECT f.FlightNumber AS 'Flight No', " +
                     "a.AirlineName AS 'Airline', " +
                     "f.DepartureAirport AS 'Departure', " +
                     "f.ArrivalAirport AS 'Arrival', " +
                     "f.DepTime AS 'Departure Time', " +
                     "f.ArrTime AS 'Arrival Time', " +
                     "f.Fare AS 'Fare' " +
                     "FROM flights f " +
                     "JOIN airlines a ON f.AirlineID = a.AirlineID";
        boolean hasWhere = false;

        if (!"All".equals(dep)) {
            sql += " WHERE DepartureAirport = ?";
            hasWhere = true;
        }
        if (!"All".equals(arr)) {
            sql += hasWhere ? " AND ArrivalAirport = ?" : " WHERE ArrivalAirport = ?";
        }

        // DATABASE CONNECTION
        try (Connection conn = Utility.DatabaseConnection.getConnection();
             PreparedStatement pst = conn.prepareStatement(sql)) {

            int paramIndex = 1;
            if (!"All".equals(dep)) {
                pst.setString(paramIndex++, dep);
            }
            if (!"All".equals(arr)) {
                pst.setString(paramIndex++, arr);
            }

            ResultSet rs = pst.executeQuery();
            flightsTable.setModel(buildTableModel(rs)); // <-- helper method to build table
            flightsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Allow only single selection
            flightsTable.getTableHeader().setReorderingAllowed(false); // Disable reordering

        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error searching flights: " + e.getMessage());
        }
    }
    
    /**
     * Helper function to build the table
     * @param rs
     * @return DefaultTableModel
     * @throws Exception 
     */
    public static DefaultTableModel buildTableModel(ResultSet rs) throws Exception {
        ResultSetMetaData metaData = rs.getMetaData();

        // Column names
        Vector<String> columnNames = new Vector<>();
        int columnCount = metaData.getColumnCount();
        for (int i = 1; i <= columnCount; i++) {
            columnNames.add(metaData.getColumnLabel(i));
        }

        // Desired date output format
        java.time.format.DateTimeFormatter outputFormat =
                java.time.format.DateTimeFormatter.ofPattern("MMM d, yyyy h:mm a");

        // Data rows
        Vector<Vector<Object>> data = new Vector<>();
        while (rs.next()) {
            Vector<Object> row = new Vector<>();
            for (int i = 1; i <= columnCount; i++) {
                Object value = rs.getObject(i);

                if (value != null) {
                    try {
                        if (value instanceof java.sql.Timestamp) {
                            // Handle SQL Timestamp
                            java.time.LocalDateTime dt = ((java.sql.Timestamp) value).toLocalDateTime();
                            value = dt.format(outputFormat);
                        } else if (value instanceof java.sql.Date) {
                            // Handle SQL Date
                            java.time.LocalDateTime dt = ((java.sql.Date) value).toLocalDate().atStartOfDay();
                            value = dt.format(outputFormat);
                        } else if (value.toString().contains("T")) {
                            // Handle ISO string like "2025-09-06T15:30"
                            java.time.LocalDateTime dt = java.time.LocalDateTime.parse(value.toString());
                            value = dt.format(outputFormat);
                        }
                    } catch (Exception e) {
                        // fallback: shows raw value
                        value = value.toString();
                    }
                }
                row.add(value);
            }
            data.add(row);
        }

        return new DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // All cells non-editable
            }
        };
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Flights().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> arrComboBox;
    private javax.swing.JLabel arrLabel;
    private javax.swing.JButton bookFlightButton;
    private javax.swing.JLabel bookTitleLabel;
    private javax.swing.JComboBox<String> depComboBox;
    private javax.swing.JLabel depLabel;
    private javax.swing.JButton filterButton;
    private javax.swing.JTable flightsTable;
    private javax.swing.JScrollPane ftScrollPane;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
