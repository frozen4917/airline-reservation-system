package airline;

import java.sql.*;
import javax.swing.*;

/**
 * Allows user to book reservation on a selected flight from Flights.java
 * @author kondk
 */

public class Booking extends javax.swing.JFrame {
    
    private String flightNumber, fare, bFare;
    private int totalFare;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Booking.class.getName());

    /**
     * Creates new form Booking
     * @param flightNumber Flight number of the selected flight
     * @param depAirport Departure airport code
     * @param arrAirport Arrival airport code
     * @param depTime Departure time
     * @param arrTime Arrival time
     * @param airlineName Name of the airline
     * @param fare Base Economy fare of a single passenger
     */
    public Booking(String flightNumber, String depAirport, String arrAirport,
                   String depTime, String arrTime, String airlineName, String fare) {
        initComponents();
        this.flightNumber = flightNumber;
        this.fare = fare; // ECONOMY FARE
        int b = (int)(Integer.parseInt(fare) * 1.5);
        bFare = Integer.toString(b);    // BUSINESS (equal to 1.5 times ECONOMY fare)

        // Fill labels
        flightNumberLabel.setText("Flight Number: " + flightNumber);
        depLabel.setText("Departure Airport: " + depAirport);
        arrLabel.setText("Arrival Airport: " + arrAirport);
        depTimeLabel.setText("Departure Time: " + depTime);
        arrTimeLabel.setText("Arrival Time: " + arrTime);
        airlineLabel.setText("Airline: " + airlineName);
        eBaseFareLabel.setText("Economy Base Fare: " + fare);
        bBaseFareLabel.setText("Business Base Fare: " + bFare);
        
        // Add listeners so totals update whenever spinner values change
        economyCountSpinner.addChangeListener(e -> updateTotals());
        businessCountSpinner.addChangeListener(e -> updateTotals());
        updateTotals();
    }
    
    
    
    /**
     * Updates total passenger and total fare when spinners change
     */
    private void updateTotals() {
        int economyCount = (int) economyCountSpinner.getValue();
        int businessCount = (int) businessCountSpinner.getValue();
        int totalPassengers = economyCount + businessCount;

        // If total exceeds 9, reset and warn
        if (totalPassengers > 9) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Maximum 9 passengers allowed per booking.\nPlease contact customer service for group deals.");

            // Reset last changed spinner so total = 9
            if (economyCount > 0) {
                economyCountSpinner.setValue(9 - businessCount);
            } else {
                businessCountSpinner.setValue(9 - economyCount);
            }
            return;
        }

        // Fare calculation
        int baseFare = Integer.parseInt(fare); // Economy fare per passenger
        int businessFare = Integer.parseInt(bFare); // Business fare per passenger
        int totalEconomy = economyCount * baseFare;
        int totalBusiness = businessCount * businessFare;
        totalFare = totalEconomy + totalBusiness;

        // Update labels
        eTotalFareLabel.setText("Economy (" + economyCount + ") Total Fare: " + totalEconomy);
        bTotalFareLabel.setText("Business (" + businessCount + ") Total Fare: " + totalBusiness);
        totalFareLabel.setText("Total Fare: " + totalFare);
        totalPassengersLabel.setText("Total Passengers: " + totalPassengers);
        bookReservationButton.setText("PAY " + totalFare +  " AND BOOK RESERVATION");
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        flightNumberLabel = new javax.swing.JLabel();
        depLabel = new javax.swing.JLabel();
        arrLabel = new javax.swing.JLabel();
        depTimeLabel = new javax.swing.JLabel();
        arrTimeLabel = new javax.swing.JLabel();
        airlineLabel = new javax.swing.JLabel();
        passengerTitleLabel = new javax.swing.JLabel();
        businessHeaderLabel = new javax.swing.JLabel();
        economyHeaderLabel = new javax.swing.JLabel();
        economyCountSpinner = new javax.swing.JSpinner();
        eBaseFareLabel = new javax.swing.JLabel();
        bBaseFareLabel = new javax.swing.JLabel();
        ePassengersLabel = new javax.swing.JLabel();
        bPassengersLabel = new javax.swing.JLabel();
        businessCountSpinner = new javax.swing.JSpinner();
        eTotalFareLabel = new javax.swing.JLabel();
        bTotalFareLabel = new javax.swing.JLabel();
        confirmationTitleLabel = new javax.swing.JLabel();
        totalPassengersLabel = new javax.swing.JLabel();
        totalFareLabel = new javax.swing.JLabel();
        bookReservationButton = new javax.swing.JButton();
        returnBackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("BOOKING RESERVATION");

        flightNumberLabel.setText("Flight number: ");

        depLabel.setText("Departure Airport: ");

        arrLabel.setText("Arrival Airport: ");

        depTimeLabel.setText("Departure Time: ");

        arrTimeLabel.setText("Arrival Time: ");

        airlineLabel.setText("Airline:");

        passengerTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        passengerTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        passengerTitleLabel.setText("NUMBER OF PASSENGERS");

        businessHeaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        businessHeaderLabel.setText("Business");

        economyHeaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        economyHeaderLabel.setText("Economy");

        economyCountSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 9, 1));

        eBaseFareLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        eBaseFareLabel.setText("Economy Base Fare:");

        bBaseFareLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bBaseFareLabel.setText("Business Base Fare:");

        ePassengersLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ePassengersLabel.setText("Economy Passengers:");

        bPassengersLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bPassengersLabel.setText("Business Passengers:");

        businessCountSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 9, 1));

        eTotalFareLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        eTotalFareLabel.setText("Economy Total Fare:");

        bTotalFareLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bTotalFareLabel.setText("Business Total Fare:");

        confirmationTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmationTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        confirmationTitleLabel.setText("CONFIRMATION");

        totalPassengersLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        totalPassengersLabel.setText("Total passengers:");

        totalFareLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        totalFareLabel.setText("Total fare:");

        bookReservationButton.setText("PAY 0 AND BOOK RESERVATION");
        bookReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookReservationButtonActionPerformed(evt);
            }
        });

        returnBackButton.setText("Return back");
        returnBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passengerTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(arrLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(depLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                            .addComponent(flightNumberLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(depTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(arrTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(airlineLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(economyHeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(businessHeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eBaseFareLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ePassengersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(economyCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bPassengersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(businessCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(bBaseFareLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eTotalFareLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bTotalFareLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(confirmationTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalPassengersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bookReservationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalFareLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flightNumberLabel)
                    .addComponent(airlineLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depLabel)
                    .addComponent(depTimeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arrLabel)
                    .addComponent(arrTimeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passengerTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(businessHeaderLabel)
                    .addComponent(economyHeaderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eBaseFareLabel)
                    .addComponent(bBaseFareLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ePassengersLabel)
                    .addComponent(economyCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bPassengersLabel)
                    .addComponent(businessCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eTotalFareLabel)
                    .addComponent(bTotalFareLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirmationTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalPassengersLabel)
                    .addComponent(totalFareLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnBackButton)
                    .addComponent(bookReservationButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates reservation and inserts it into database
     * @param evt 
     */
    private void bookReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookReservationButtonActionPerformed
        int economySeats = (Integer) economyCountSpinner.getValue();
        int businessSeats = (Integer) businessCountSpinner.getValue();

        if (economySeats + businessSeats == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select at least one seat before proceeding to payment.");
            return;
        }
        
        // ⚠ ⚠ FAKE PAYMENT GATEWAY SIMULATION; UPDATE LATER WITH PAYMENT GATEWAY :)
        showTimedMessage("Connecting to Payment Gateway...\nPlease wait...", "Payment Gateway", 1700); // <-- Helper to show timed message
        // After 1.7 seconds, continue code:
        javax.swing.Timer timer = new javax.swing.Timer(1800, e -> {
            // ⚠ ⚠ SIMULATE A PAYMENT; UPDATE LATER WITH PAYMENT GATEWAY
            simulatePayment(); 
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bookReservationButtonActionPerformed

    /**
     * Shows a message for set duration
     * @param message message contents
     * @param title Title of the dialog message
     * @param milliseconds Duration in ms
     */
    private void showTimedMessage(String message, String title, int milliseconds) {
        final JOptionPane optionPane = new JOptionPane(
            message,
            JOptionPane.INFORMATION_MESSAGE,
            JOptionPane.DEFAULT_OPTION,
            null,
            new Object[]{}, // No buttons
            null
        );

        final JDialog dialog = optionPane.createDialog(this, title);
        dialog.setModal(false);  // Don’t block the rest of the code
        dialog.setVisible(true);

        // Close after delay
        new javax.swing.Timer(milliseconds, e -> dialog.dispose()).start();
    }

    /**
     * Simulates a payment portal
     */
    private void simulatePayment() {
        Object[] options = {"Pay Now", "Cancel"};
        int choice = javax.swing.JOptionPane.showOptionDialog(
            this,
            "Airline Secure Payment Gateway\n\n" +
            "Total Amount: " + totalFare + "\n\n" +
            "Choose your payment method:\n" +
            "- Credit/Debit Card\n" +
            "- Net Banking\n" +
            "- Wallet / UPI\n",
            "Payment Gateway",
            javax.swing.JOptionPane.YES_NO_OPTION,
            javax.swing.JOptionPane.PLAIN_MESSAGE,
            null,
            options,
            options[0]
        );

        if (choice == javax.swing.JOptionPane.YES_OPTION) {
            // Fake a delay like payment processing using showTimedMessage() function
            showTimedMessage("Processing payment...\nPlease wait...", "Payment Gateway", 1500);
            // After 1.5 seconds, show success
            javax.swing.Timer timer2 = new javax.swing.Timer(1600, e -> {
                try {
                    // DATABASE CONNECTION
                    Connection conn = Utility.DatabaseConnection.getConnection();
                    int economySeats = (Integer) economyCountSpinner.getValue();
                    int businessSeats = (Integer) businessCountSpinner.getValue();

                    String paxID = Utility.Session.getPaxID();
                    if (paxID != null) {
                        createReservation(conn, paxID, flightNumber, economySeats, businessSeats); // Pass it to another function for neatness
                    } else {
                        JOptionPane.showMessageDialog(this, "❌ PaxID not found for user.");
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "❌ Database error: " + ex.getMessage());
                }
            });
            timer2.setRepeats(false);
            timer2.start();
        } else {
            JOptionPane.showMessageDialog(this,
                "Payment cancelled. Booking not completed.");
        }
    }

    /**
     * Generates a unique PNR for reservation
     * @param conn Database Connection
     * @return randomly generated unique PNR
     * @throws SQLException 
     */
    private String generateUniquePNR(Connection conn) throws SQLException {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        java.util.Random rnd = new java.util.Random();
        String pnr;

        while (true) {
            // Generate random 7-char PNR
            StringBuilder sb = new StringBuilder(7);
            for (int i = 0; i < 7; i++) {
                sb.append(chars.charAt(rnd.nextInt(chars.length())));
            }
            pnr = sb.toString();

            // Check if it already exists
            String sql = "SELECT COUNT(*) FROM reservations WHERE PNR = ?";
            try (PreparedStatement pst = conn.prepareStatement(sql)) {
                pst.setString(1, pnr);
                ResultSet rs = pst.executeQuery();
                if (rs.next() && rs.getInt(1) == 0) {
                    break; // Found unique PNR
                }
            }
        }
        return pnr;
    }

    /**
     * Inserts reservation into the database
     * @param conn Database connection
     * @param paxID Passenger ID of the user
     * @param selectedFlightNumber Selected flight numbers
     * @param economySeats Number of economy seats
     * @param businessSeats Number of business seats
     */
    private void createReservation(Connection conn, String paxID, String selectedFlightNumber,
                                  int economySeats, int businessSeats) {
        try {
            // Generates unique PNR using generateUniquePNR() function
            String pnr = generateUniquePNR(conn);

            String insertSQL = "INSERT INTO reservations " +
                    "(PNR, PaxID, FlightNumber, EconomySeats, BusinessSeats, TotalFare, Status) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?)";

            try (PreparedStatement insertPst = conn.prepareStatement(insertSQL)) {
                insertPst.setString(1, pnr);
                insertPst.setString(2, paxID);
                insertPst.setString(3, selectedFlightNumber);
                insertPst.setInt(4, economySeats);
                insertPst.setInt(5, businessSeats);
                insertPst.setInt(6, totalFare);
                insertPst.setString(7, "CONFIRMED");

                int rows = insertPst.executeUpdate();

                if (rows > 0) {
                    JOptionPane.showMessageDialog(this,
                            "✅ Payment Successful!\nYour booking is confirmed.\nPNR: " + pnr);
                    MainDashboard dashboard = new MainDashboard();
                    dashboard.setVisible(true);
                    this.dispose();
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "❌ Error while saving reservation: " + ex.getMessage());
        }
    }

    /**
     * Returns back to the Flight list/selection window
     * @param evt 
     */
    private void returnBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBackButtonActionPerformed
        Flights flight = new Flights();
        flight.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_returnBackButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Booking("null","null","null","null","null","null","null").setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel airlineLabel;
    private javax.swing.JLabel arrLabel;
    private javax.swing.JLabel arrTimeLabel;
    private javax.swing.JLabel bBaseFareLabel;
    private javax.swing.JLabel bPassengersLabel;
    private javax.swing.JLabel bTotalFareLabel;
    private javax.swing.JButton bookReservationButton;
    private javax.swing.JSpinner businessCountSpinner;
    private javax.swing.JLabel businessHeaderLabel;
    private javax.swing.JLabel confirmationTitleLabel;
    private javax.swing.JLabel depLabel;
    private javax.swing.JLabel depTimeLabel;
    private javax.swing.JLabel eBaseFareLabel;
    private javax.swing.JLabel ePassengersLabel;
    private javax.swing.JLabel eTotalFareLabel;
    private javax.swing.JSpinner economyCountSpinner;
    private javax.swing.JLabel economyHeaderLabel;
    private javax.swing.JLabel flightNumberLabel;
    private javax.swing.JLabel passengerTitleLabel;
    private javax.swing.JButton returnBackButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel totalFareLabel;
    private javax.swing.JLabel totalPassengersLabel;
    // End of variables declaration//GEN-END:variables
}
